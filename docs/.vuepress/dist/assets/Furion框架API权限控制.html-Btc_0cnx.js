import{_ as s,c as a,d as e,o as p}from"./app-B90K-Dsy.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="furion-框架-api-权限控制实践" tabindex="-1"><a class="header-anchor" href="#furion-框架-api-权限控制实践"><span>Furion 框架 API 权限控制实践</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在 Web API 开发中，权限控制是一个非常重要的环节。本文将介绍如何使用 Furion 框架的 <code>DynamicApiController</code> 特性来实现 API 的权限控制。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><p>首先，让我们看一个基本的示例：</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">Furion<span class="token punctuation">.</span>DynamicApiController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ABCLab<span class="token punctuation">.</span>Services</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;LabSystem/TestCate&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  <span class="token comment">// 定义API路由前缀</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDynamicApiController</span></span>  <span class="token comment">// 继承IDynamicApiController接口</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;@add&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  <span class="token comment">// 定义HTTP方法和路由</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;third&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键点解析" tabindex="-1"><a class="header-anchor" href="#关键点解析"><span>关键点解析</span></a></h2><ol><li><p><strong>路由定义</strong></p><ul><li>使用 <code>[Route(&quot;LabSystem/TestCate&quot;)]</code> 特性定义了API的基础路由</li><li>这样可以对整个控制器下的API进行分组管理</li><li>最终访问路径为：<code>/LabSystem/TestCate/具体方法路由</code></li></ul></li><li><p><strong>动态API控制器</strong></p><ul><li>通过继承 <code>IDynamicApiController</code> 接口，将普通类转换为API控制器</li><li>Furion框架会自动处理相关的API注册和路由映射</li></ul></li><li><p><strong>HTTP方法特性</strong></p><ul><li>使用 <code>[HttpGet(&quot;@add&quot;)]</code> 定义具体的HTTP方法和路由</li><li>支持 GET、POST、PUT、DELETE 等HTTP方法</li><li>路由可以使用特殊字符（如@）来定制化API路径</li></ul></li></ol><h2 id="权限控制方案" tabindex="-1"><a class="header-anchor" href="#权限控制方案"><span>权限控制方案</span></a></h2><p>基于这种路由结构，我们可以实现以下权限控制方案：</p><ol><li><p><strong>路由级别权限</strong></p><ul><li>可以基于路由前缀（如 <code>LabSystem</code>）进行模块级别的权限控制</li><li>适合实现大型系统的模块化权限管理</li></ul></li><li><p><strong>控制器级别权限</strong></p><ul><li>可以针对具体分类（如 <code>TestCate</code>）进行权限控制</li><li>适合实现功能模块的权限管理</li></ul></li><li><p><strong>方法级别权限</strong></p><ul><li>可以针对具体方法（如 <code>@add</code>）进行细粒度权限控制</li><li>适合实现具体操作的权限管理</li></ul></li></ol><h2 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议</span></a></h2><ol><li>建议采用统一的路由命名规范，便于权限控制的管理</li><li>可以配合 JWT 或其他认证机制使用</li><li>建议在中间件中统一处理权限验证逻辑</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过 Furion 框架的动态API控制器特性，我们可以很方便地实现灵活的API权限控制。这种方式不仅代码清晰，而且易于维护和扩展。</p><hr><blockquote><p>作者：Claude</p><p>日期：2024-05-14</p><p>标签：Furion, API, 权限控制, 动态API</p></blockquote>`,17)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/posts/Furion%E6%A1%86%E6%9E%B6API%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html","title":"Furion 框架 API 权限控制实践","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"关键点解析","slug":"关键点解析","link":"#关键点解析","children":[]},{"level":2,"title":"权限控制方案","slug":"权限控制方案","link":"#权限控制方案","children":[]},{"level":2,"title":"实践建议","slug":"实践建议","link":"#实践建议","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"posts/Furion框架API权限控制.md","excerpt":"\\n<h2>简介</h2>\\n<p>在 Web API 开发中，权限控制是一个非常重要的环节。本文将介绍如何使用 Furion 框架的 <code>DynamicApiController</code> 特性来实现 API 的权限控制。</p>\\n<h2>代码实现</h2>\\n<p>首先，让我们看一个基本的示例：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"cs\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">Furion<span class=\\"token punctuation\\">.</span>DynamicApiController</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">Microsoft<span class=\\"token punctuation\\">.</span>AspNetCore<span class=\\"token punctuation\\">.</span>Mvc</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">ABCLab<span class=\\"token punctuation\\">.</span>Services</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">Route</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"LabSystem/TestCate\\"</span><span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>  <span class=\\"token comment\\">// 定义API路由前缀</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TestService</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">IDynamicApiController</span></span>  <span class=\\"token comment\\">// 继承IDynamicApiController接口</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">HttpGet</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"@add\\"</span><span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>  <span class=\\"token comment\\">// 定义HTTP方法和路由</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getNames</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token string\\">\\"first\\"</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">            <span class=\\"token string\\">\\"second\\"</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">            <span class=\\"token string\\">\\"third\\"</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{o as comp,u as data};
