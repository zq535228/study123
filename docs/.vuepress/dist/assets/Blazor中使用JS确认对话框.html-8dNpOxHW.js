import{_ as s,c as a,d as e,o as p}from"./app-B90K-Dsy.js";const l={};function t(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="blazor中使用js-confirm对话框的实现与应用" tabindex="-1"><a class="header-anchor" href="#blazor中使用js-confirm对话框的实现与应用"><span>Blazor中使用JS.Confirm对话框的实现与应用</span></a></h1><p>在Blazor应用程序中，我们经常需要与用户进行交互确认，例如在执行重要操作前获取用户的确认。本文将介绍如何在Blazor组件中使用<code>JS.Confirm</code>方法实现用户确认对话框，并根据用户的选择执行不同的操作。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><p><code>JS.Confirm</code>是通过<code>IJSRuntime</code>服务提供的JavaScript互操作方法，它返回一个布尔值，表示用户是点击了&quot;确定&quot;还是&quot;取消&quot;按钮。</p><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><p>以下是一个简单的使用示例：</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line">@inject IJSRuntime JS</span>
<span class="line">@inject MessageService MessageService</span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span><span class="token class-name">Button</span> OnClick<span class="token operator">=</span><span class="token string">&quot;@Test_Success&quot;</span><span class="token operator">&gt;</span>测试成功<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">@code <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test_Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 显示确认对话框，并获取用户选择结果</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> JS<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Test_Success&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 根据用户选择执行不同的操作</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> MessageService<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token string">&quot;点击了确定&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> MessageService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;点击了取消&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h2><p><code>JS.Confirm</code>方法接受两个参数：</p><ul><li>第一个参数：对话框的标题</li><li>第二个参数：对话框的内容/提示信息</li></ul><h2 id="链式调用示例" tabindex="-1"><a class="header-anchor" href="#链式调用示例"><span>链式调用示例</span></a></h2><p>我们还可以使用链式调用，根据用户的第一次选择，决定是否显示第二个确认对话框：</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line">@inject IJSRuntime JS</span>
<span class="line">@inject MessageService MessageService</span>
<span class="line">@inject AdminContext AdminContext</span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test_Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> JS<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Test_Success&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> MessageService<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token string">&quot;点击了确定&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> MessageService<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;点击了取消&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据第一次确认结果，决定是否显示第二个确认对话框</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> JS<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;是否给管理员发送消息?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        AdminContext<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>AdminContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token string">&quot;你尝尝昂&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p><code>JS.Confirm</code>对话框在以下场景特别有用：</p><ol><li><strong>危险操作确认</strong>：如删除数据、提交表单等</li><li><strong>流程中断提醒</strong>：如用户尝试离开未保存的编辑页面</li><li><strong>操作后续动作询问</strong>：如上例中的&quot;是否给管理员发送消息&quot;</li></ol><h2 id="技术要点" tabindex="-1"><a class="header-anchor" href="#技术要点"><span>技术要点</span></a></h2><ol><li>需要注入<code>IJSRuntime</code>服务以调用JavaScript函数</li><li><code>JS.Confirm</code>方法是异步的，需要使用<code>await</code>关键字</li><li>返回值是布尔类型，表示用户的选择</li><li>可以根据返回值执行不同的业务逻辑</li></ol><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p><code>JS.Confirm</code>对话框是Blazor应用中实现用户交互确认的简便方法。它结合了JavaScript的对话框功能和C#的类型安全，为开发者提供了既简单又强大的用户交互机制。通过合理使用这一功能，可以显著提升应用的用户体验和操作安全性。</p><hr><blockquote><p>作者：Claude</p><p>日期：2024-03-22</p><p>标签：Blazor, IJSRuntime, 对话框, 用户交互</p></blockquote>`,22)]))}const o=s(l,[["render",t]]),u=JSON.parse('{"path":"/posts/Blazor%E4%B8%AD%E4%BD%BF%E7%94%A8JS%E7%A1%AE%E8%AE%A4%E5%AF%B9%E8%AF%9D%E6%A1%86.html","title":"Blazor中使用JS.Confirm对话框的实现与应用","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}]},{"level":2,"title":"参数说明","slug":"参数说明","link":"#参数说明","children":[]},{"level":2,"title":"链式调用示例","slug":"链式调用示例","link":"#链式调用示例","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"技术要点","slug":"技术要点","link":"#技术要点","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"filePathRelative":"posts/Blazor中使用JS确认对话框.md","excerpt":"\\n<p>在Blazor应用程序中，我们经常需要与用户进行交互确认，例如在执行重要操作前获取用户的确认。本文将介绍如何在Blazor组件中使用<code>JS.Confirm</code>方法实现用户确认对话框，并根据用户的选择执行不同的操作。</p>\\n<h2>基本用法</h2>\\n<p><code>JS.Confirm</code>是通过<code>IJSRuntime</code>服务提供的JavaScript互操作方法，它返回一个布尔值，表示用户是点击了\\"确定\\"还是\\"取消\\"按钮。</p>\\n<h3>代码示例</h3>\\n<p>以下是一个简单的使用示例：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"cs\\"><pre><code><span class=\\"line\\">@inject IJSRuntime JS</span>\\n<span class=\\"line\\">@inject MessageService MessageService</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">Button</span> OnClick<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"@Test_Success\\"</span><span class=\\"token operator\\">&gt;</span>测试成功<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>Button<span class=\\"token operator\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">@code <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Test_Success</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">// 显示确认对话框，并获取用户选择结果</span></span>\\n<span class=\\"line\\">        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> JS<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Confirm</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Test_Success\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"content\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token comment\\">// 根据用户选择执行不同的操作</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">await</span> MessageService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Success</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"点击了确定\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">else</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">await</span> MessageService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"点击了取消\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{o as comp,u as data};
