import comp from "/Users/Zhuanz/reps/study123/vuepress-starter/docs/.vuepress/.temp/pages/posts/Blazor文件下载实现方式.html.vue"
const data = JSON.parse("{\"path\":\"/posts/Blazor%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html\",\"title\":\"Blazor 文件下载的几种实现方式\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"1. 使用 JavaScript Interop\",\"slug\":\"_1-使用-javascript-interop\",\"link\":\"#_1-使用-javascript-interop\",\"children\":[]},{\"level\":2,\"title\":\"2. 使用控制器（推荐方式）\",\"slug\":\"_2-使用控制器-推荐方式\",\"link\":\"#_2-使用控制器-推荐方式\",\"children\":[]},{\"level\":2,\"title\":\"优缺点分析\",\"slug\":\"优缺点分析\",\"link\":\"#优缺点分析\",\"children\":[{\"level\":3,\"title\":\"JavaScript Interop 方式\",\"slug\":\"javascript-interop-方式\",\"link\":\"#javascript-interop-方式\",\"children\":[]},{\"level\":3,\"title\":\"控制器方式\",\"slug\":\"控制器方式\",\"link\":\"#控制器方式\",\"children\":[]}]},{\"level\":2,\"title\":\"最佳实践建议\",\"slug\":\"最佳实践建议\",\"link\":\"#最佳实践建议\",\"children\":[]},{\"level\":2,\"title\":\"示例代码\",\"slug\":\"示例代码\",\"link\":\"#示例代码\",\"children\":[]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"git\":{},\"filePathRelative\":\"posts/Blazor文件下载实现方式.md\",\"excerpt\":\"\\n<p>在 Blazor 应用程序中，实现文件下载功能是一个常见需求。本文将介绍几种不同的实现方式，并分析它们的优缺点。</p>\\n<h2>1. 使用 JavaScript Interop</h2>\\n<p>这是最简单的实现方式，但需要依赖 JavaScript。</p>\\n<div class=\\\"language-csharp line-numbers-mode\\\" data-highlighter=\\\"prismjs\\\" data-ext=\\\"cs\\\"><pre><code><span class=\\\"line\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">DownloadFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></span>\\n<span class=\\\"line\\\"><span class=\\\"token punctuation\\\">{</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">using</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> memoryStream <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryStream</span><span class=\\\"token punctuation\\\">(</span>_processedFile<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> streamRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">DotNetStreamReference</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token named-parameter punctuation\\\">stream</span><span class=\\\"token punctuation\\\">:</span> memoryStream<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"line\\\">    </span>\\n<span class=\\\"line\\\">    <span class=\\\"token keyword\\\">await</span> JS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">InvokeVoidAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"downloadFileFromStream\\\"</span><span class=\\\"token punctuation\\\">,</span> streamRef<span class=\\\"token punctuation\\\">,</span> newFileName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"line\\\"><span class=\\\"token punctuation\\\">}</span></span>\\n<span class=\\\"line\\\"></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
