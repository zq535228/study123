import comp from "/Users/Zhuanz/reps/study123/vuepress-starter/docs/.vuepress/.temp/pages/posts/Blazor中条码加密服务实现.html.vue"
const data = JSON.parse("{\"path\":\"/posts/Blazor%E4%B8%AD%E6%9D%A1%E7%A0%81%E5%8A%A0%E5%AF%86%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0.html\",\"title\":\"在Blazor中实现条码加密服务\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"1. 设计接口\",\"slug\":\"_1-设计接口\",\"link\":\"#_1-设计接口\",\"children\":[]},{\"level\":2,\"title\":\"2. 实现加密服务\",\"slug\":\"_2-实现加密服务\",\"link\":\"#_2-实现加密服务\",\"children\":[]},{\"level\":2,\"title\":\"3. 注册服务\",\"slug\":\"_3-注册服务\",\"link\":\"#_3-注册服务\",\"children\":[]},{\"level\":2,\"title\":\"4. 使用 MiniExcel 实现批量处理\",\"slug\":\"_4-使用-miniexcel-实现批量处理\",\"link\":\"#_4-使用-miniexcel-实现批量处理\",\"children\":[]},{\"level\":2,\"title\":\"5. 安全性考虑\",\"slug\":\"_5-安全性考虑\",\"link\":\"#_5-安全性考虑\",\"children\":[]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"git\":{},\"filePathRelative\":\"posts/Blazor中条码加密服务实现.md\",\"excerpt\":\"\\n<p>在实验室信息管理系统(LIS)中，条码是一个非常重要的标识符，它用于追踪样本、记录检测结果等。为了保护数据安全，我们需要对条码进行加密处理。本文将介绍如何在Blazor应用中实现一个简单但安全的条码加密服务，并结合 MiniExcel 实现 Excel 文件的批量处理。</p>\\n<h2>1. 设计接口</h2>\\n<p>首先，我们定义了一个条码加密服务的接口：</p>\\n<div class=\\\"language-csharp line-numbers-mode\\\" data-highlighter=\\\"prismjs\\\" data-ext=\\\"cs\\\"><pre><code><span class=\\\"line\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IBarcodeEncryption</span></span>\\n<span class=\\\"line\\\"><span class=\\\"token punctuation\\\">{</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token function\\\">EncryptAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> barcode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token function\\\">DecryptAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> encryptedBarcode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"line\\\"><span class=\\\"token punctuation\\\">}</span></span>\\n<span class=\\\"line\\\"></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
