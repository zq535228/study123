import{_ as s,c as a,b as n,o as l}from"./app-CQ4DyvhI.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在 Web API 开发中，权限控制是一个非常重要的环节。本文将介绍如何使用 Furion 框架的 <code>DynamicApiController</code> 特性来实现 API 的权限控制。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><p>首先，让我们看一个基本的示例：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Furion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">DynamicApiController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Microsoft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">AspNetCore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Mvc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ABCLab</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Services</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Route</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LabSystem/TestCate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 定义API路由前缀</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> IDynamicApiController</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 继承IDynamicApiController接口</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">HttpGet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@add</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 定义HTTP方法和路由</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getNames</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">            &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">first</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">            &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">second</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">            &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">third</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        };</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键点解析" tabindex="-1"><a class="header-anchor" href="#关键点解析"><span>关键点解析</span></a></h2><ol><li><p><strong>路由定义</strong></p><ul><li>使用 <code>[Route(&quot;LabSystem/TestCate&quot;)]</code> 特性定义了API的基础路由</li><li>这样可以对整个控制器下的API进行分组管理</li><li>最终访问路径为：<code>/LabSystem/TestCate/具体方法路由</code></li></ul></li><li><p><strong>动态API控制器</strong></p><ul><li>通过继承 <code>IDynamicApiController</code> 接口，将普通类转换为API控制器</li><li>Furion框架会自动处理相关的API注册和路由映射</li></ul></li><li><p><strong>HTTP方法特性</strong></p><ul><li>使用 <code>[HttpGet(&quot;@add&quot;)]</code> 定义具体的HTTP方法和路由</li><li>支持 GET、POST、PUT、DELETE 等HTTP方法</li><li>路由可以使用特殊字符（如@）来定制化API路径</li></ul></li></ol><h2 id="权限控制方案" tabindex="-1"><a class="header-anchor" href="#权限控制方案"><span>权限控制方案</span></a></h2><p>基于这种路由结构，我们可以实现以下权限控制方案：</p><ol><li><p><strong>路由级别权限</strong></p><ul><li>可以基于路由前缀（如 <code>LabSystem</code>）进行模块级别的权限控制</li><li>适合实现大型系统的模块化权限管理</li></ul></li><li><p><strong>控制器级别权限</strong></p><ul><li>可以针对具体分类（如 <code>TestCate</code>）进行权限控制</li><li>适合实现功能模块的权限管理</li></ul></li><li><p><strong>方法级别权限</strong></p><ul><li>可以针对具体方法（如 <code>@add</code>）进行细粒度权限控制</li><li>适合实现具体操作的权限管理</li></ul></li></ol><h2 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议</span></a></h2><ol><li>建议采用统一的路由命名规范，便于权限控制的管理</li><li>可以配合 JWT 或其他认证机制使用</li><li>建议在中间件中统一处理权限验证逻辑</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过 Furion 框架的动态API控制器特性，我们可以很方便地实现灵活的API权限控制。这种方式不仅代码清晰，而且易于维护和扩展。</p><hr><blockquote><p>作者：Claude</p><p>日期：2024-05-14</p><p>标签：Furion, API, 权限控制, 动态API</p></blockquote>`,16)]))}const k=s(e,[["render",t]]),r=JSON.parse('{"path":"/article/furion-api-permission/","title":"Furion框架API权限控制实践","lang":"en-US","frontmatter":{"title":"Furion框架API权限控制实践","tags":["Furion","API","权限控制","动态API"],"createTime":"2024/05/14 16:30:00","permalink":"/article/furion-api-permission/"},"headers":[],"readingTime":{"minutes":1.95,"words":585},"git":{"updatedTime":1742821247000,"contributors":[{"name":"bookmac","username":"bookmac","email":"zq535228@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/bookmac?v=4","url":"https://github.com/bookmac"}]},"filePathRelative":"preview/Furion框架API权限控制.md","categoryList":[{"id":"5ebeb6","sort":10000,"name":"preview"}]}');export{k as comp,r as data};
